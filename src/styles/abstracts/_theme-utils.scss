/** @format */

/**
 * Utilitaires pour la gestion des thèmes
 * - Accès simplifié aux couleurs Tailwind
 * - Génération automatique du thème sombre
 */

// Définition des variables CSS root pour tous les thèmes
:root {
	// Thème par défaut (light)
	--color-off-white: #{get-color("stone", 50)};
	--color-near-black: #{get-color("stone", 950)};

	// Variables grises
	--color-gray-darkest: #{get-color("stone", 900)};
	--color-gray-darker: #{get-color("stone", 800)};
	// etc.

	// Couleurs sémantiques
	--color-primary: #{get-color("amber", 300)};
	--color-secondary: #{get-color("amber", 950)};
	--color-tertiary: #{get-color("amber", 100)};
	--color-link: #{get-color("sky", 900)};
	--color-link-hover: #{get-color("sky", 800)};

	// Variables d'interface utilisateur
	--color-main-bg: var(--color-off-white);
	--color-main-text: var(--color-near-black);
	--color-header-bg: var(--color-primary);
	// etc.
}

// -----------------------------------------------
// FONCTIONS D'ACCÈS AUX COULEURS
// -----------------------------------------------
@function get-color($family, $weight) {
	@return map-get(map-get($colors, $family), $weight);
}

// -----------------------------------------------
// UTILITAIRES POUR THÈME SOMBRE
// -----------------------------------------------
// Liste des poids disponibles dans Tailwind
$tailwind-weights: (50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950);
// Point médian pour déterminer si on fonce ou éclaircit
$midpoint: 500;

// Fonction pour obtenir la couleur décalée pour le thème sombre
@function get-dark-color($family, $weight, $steps: 6) {
	// Trouver l'index du poids actuel dans la liste des poids Tailwind
	$current-index: index($tailwind-weights, $weight);

	@if not $current-index {
		@error "Le poids #{$weight} n'existe pas dans la palette Tailwind";
	}

	// Déterminer si la couleur doit être foncée ou éclaircie
	// en fonction du point médian de la palette
	$new-index: $current-index;

	@if $weight < $midpoint {
		// Couleurs claires: on augmente l'index pour foncer
		$new-index: $current-index + $steps;
	} @else {
		// Couleurs foncées: on diminue l'index pour éclaircir
		// On ne diminue pas pour 500 qui est le pivot neutre
		@if $weight > $midpoint {
			$new-index: $current-index - $steps;
		}
	}

	// Limiter l'index dans les bornes de la liste
	@if $new-index > length($tailwind-weights) {
		$new-index: length($tailwind-weights);
	} @else if $new-index < 1 {
		$new-index: 1;
	}

	// Obtenir le nouveau poids
	$new-weight: nth($tailwind-weights, $new-index);

	// Retourner la couleur correspondante
	@return get-color($family, $new-weight);
}

// -----------------------------------------------
// UTILITAIRES POUR THÈME À FORT CONTRASTE
// -----------------------------------------------
// Couleurs fixes pour le thème à fort contraste
$hc-colors: (
	"background": #000000,
	// Fond noir
	"text": #ffff00,
	// Texte jaune vif
	"link": #00ffff,
	// Liens cyan
	"focus": #ffffff,
	// État focus en blanc
	"heading": #bfff00,
	// Titres vert-jaune
	"success": #00ff00,
	// Validation en vert,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	"error": #ff0000,
);

// Fonction pour déterminer si une couleur est sombre ou claire
@function is-dark($color) {
	$luminance: (
			red($color) * 0.299 + green($color) * 0.587 + blue($color) * 0.114
		) / 255;
	@return $luminance < 0.5;
}

// Fonction intelligente qui transforme automatiquement une couleur selon son rôle
@function transform-for-high-contrast($color, $element-type) {
	// Détermine automatiquement le rôle de la couleur en fonction de son type d'élément
	@if $element-type == "background" or str-index($element-type, "_bg") {
		// Les fonds deviennent toujours noirs
		@return map-get($hc-colors, "background");
	} @else if $element-type == "text" or str-index($element-type, "_text") {
		// Le texte devient toujours jaune
		@return map-get($hc-colors, "text");
	} @else if
		str-index($element-type, "link") or
		str-index($element-type, "_link")
	{
		// Les liens deviennent cyan
		@return map-get($hc-colors, "link");
	} @else if
		str-index($element-type, "heading") or
		str-index($element-type, "title")
	{
		// Les titres deviennent vert-jaune
		@return map-get($hc-colors, "heading");
	} @else if
		str-index($element-type, "hover") or
		str-index($element-type, "focus")
	{
		// États de focus et survol en blanc
		@return map-get($hc-colors, "focus");
	} @else if str-index($element-type, "success") {
		// Éléments de succès/validation en vert
		@return map-get($hc-colors, "success");
	} @else {
		// Pour les autres éléments, décision basée sur la luminance
		@if is-dark($color) {
			// Si la couleur est foncée, elle devient jaune
			@return map-get($hc-colors, "text");
		} @else {
			// Si la couleur est claire, elle devient noire
			@return map-get($hc-colors, "background");
		}
	}
}

// -----------------------------------------------
// UTILITAIRES POUR THÈMES DALTONIENS
// -----------------------------------------------

// Matrices de simulation du daltonisme
// Ces matrices sont utilisées pour simuler comment une personne daltonienne percevrait une couleur
$protanopia-matrix: (0.567, 0.433, 0, 0.558, 0.442, 0, 0, 0.242, 0.758);

$deuteranopia-matrix: (0.625, 0.375, 0, 0.7, 0.3, 0, 0, 0.3, 0.7);

$tritanopia-matrix: (0.95, 0.05, 0, 0, 0.433, 0.567, 0, 0.475, 0.525);

// Fonction pour convertir RGB en LMS (espace de cônes)
@function rgb-to-lms($color) {
	$r: red($color) / 255;
	$g: green($color) / 255;
	$b: blue($color) / 255;

	$l: (0.3904 * $r) + (0.5498 * $g) + (0.0598 * $b);
	$m: (0.0456 * $r) + (0.7416 * $g) + (0.2128 * $b);
	$s: (0 * $r) + (0 * $g) + (1 * $b);

	@return ($l, $m, $s);
}

// Fonction pour convertir LMS en RGB
@function lms-to-rgb($lms) {
	$l: nth($lms, 1);
	$m: nth($lms, 2);
	$s: nth($lms, 3);

	$r: (2.85 * $l) - (1.62 * $m) - (0.23 * $s);
	$g: (-0.25 * $l) + (1.18 * $m) + (0.06 * $s);
	$b: (0 * $l) + (0 * $m) + (1 * $s);

	$r: max(0, min(1, $r)) * 255;
	$g: max(0, min(1, $g)) * 255;
	$b: max(0, min(1, $b)) * 255;

	@return rgb($r, $g, $b);
}

// Fonction qui transforme une couleur pour l'adapter à un type spécifique de daltonisme
@function adapt-color-for-colorblindness($color, $type, $enhance-factor: 1.5) {
	// Sélection de la matrice appropriée
	$matrix: $protanopia-matrix;
	@if $type == "deuteranopia" {
		$matrix: $deuteranopia-matrix;
	} @else if $type == "tritanopia" {
		$matrix: $tritanopia-matrix;
	}

	// Pour les couleurs essentielles, utiliser des teintes spécifiques
	// fortement contrastées pour chaque type de daltonisme
	@if $type == "deuteranopia" {
		@if is-similar-to($color, #ff0000) or is-similar-to($color, #00ff00) {
			@if brightness($color) < 0.5 {
				@return #0075ff; // Bleu pour les rouges/verts foncés
			} @else {
				@return #ffcc00; // Jaune doré pour les rouges/verts clairs
			}
		}
	} @else if $type == "protanopia" {
		@if is-similar-to($color, #ff0000) or is-similar-to($color, #00ff00) {
			@if brightness($color) < 0.5 {
				@return #0090ff; // Bleu clair pour les rouges/verts foncés
			} @else {
				@return #ffd700; // Or pour les rouges/verts clairs
			}
		}
	} @else if $type == "tritanopia" {
		@if is-similar-to($color, #0000ff) or is-similar-to($color, #ffff00) {
			@if brightness($color) < 0.5 {
				@return #ff3399; // Rose pour les bleus/jaunes foncés
			} @else {
				@return #ff6600; // Orange pour les bleus/jaunes clairs
			}
		}
	}

	// Pour les autres couleurs, appliquer un algorithme de transformation
	// qui augmente la saturation dans les canaux que la personne distingue le mieux
	$h: hue($color);
	$s: saturation($color);
	$l: lightness($color);

	@if $type == "deuteranopia" or $type == "protanopia" {
		// Pour la confusion rouge-vert, déplacer vers bleu ou jaune
		@if $h >= 30 and $h <= 150 {
			// Vert -> Bleu-vert
			$h: 180;
			$s: min(100%, $s * $enhance-factor);
		} @else if $h >= 330 or $h <= 30 {
			// Rouge -> Jaune-orange
			$h: 40;
			$s: min(100%, $s * $enhance-factor);
		}
	} @else if $type == "tritanopia" {
		// Pour la confusion bleu-jaune, déplacer vers rouge ou vert
		@if $h >= 180 and $h <= 270 {
			// Bleu -> Magenta
			$h: 300;
			$s: min(100%, $s * $enhance-factor);
		} @else if $h >= 60 and $h <= 180 {
			// Jaune-vert -> Vert
			$h: 120;
			$s: min(100%, $s * $enhance-factor);
		}
	}

	@return hsl($h, $s, $l);
}

// Fonctions auxiliaires
@function brightness($color) {
	@return (red($color) * 0.299 + green($color) * 0.587 + blue($color) * 0.114) /
		255;
}

@function is-similar-to($color1, $color2, $threshold: 60) {
	$r1: red($color1);
	$g1: green($color1);
	$b1: blue($color1);

	$r2: red($color2);
	$g2: green($color2);
	$b2: blue($color2);

	$r_diff: abs($r1 - $r2);
	$g_diff: abs($g1 - $g2);
	$b_diff: abs($b1 - $b2);

	$total_diff: $r_diff + $g_diff + $b_diff;

	@return $total_diff < $threshold;
}

// Fonction spécifique pour chaque type de daltonisme
@function get-deuteranopia-color($family, $weight) {
	$original-color: get-color($family, $weight);
	@return adapt-color-for-colorblindness($original-color, "deuteranopia");
}

@function get-protanopia-color($family, $weight) {
	$original-color: get-color($family, $weight);
	@return adapt-color-for-colorblindness($original-color, "protanopia");
}

@function get-tritanopia-color($family, $weight) {
	$original-color: get-color($family, $weight);
	@return adapt-color-for-colorblindness($original-color, "tritanopia");
}

// -----------------------------------------------
// VARIABLES PARTAGÉES ENTRE THÈMES
// -----------------------------------------------
// Mixin qui applique toutes les variables dérivées à partir des couleurs de base
@mixin apply-theme-variables {
	// Couleurs d'arrière-plan et de texte principales
	$color-main-bg: $off-white !global;
	$color_main-bg: $off-white !global;
	$color-main-text: $near-black !global;
	$color_main-text: $near-black !global;
	$color-pages-title: $near-black !global;

	// Variables d'entête
	$color_header_bg: $primary-color !global;
	$color_header_text: $near-black !global;
	$color_header_text-role: $gray-dark !global;
	$color_header_blog-link_bg: $gray-dark !global;
	$color_header_blog-link_text: $primary-color !global;

	// Sélecteur de langue
	$color_lang-toggle_bg: $off-white !global;
	$color_lang-toggle_border: $gray-dark !global;
	$color_lang-toggle_bg-activated: $gray-dark !global;
	$color_lang-toggle_text-activated: $off-white !global;
	$color_lang-toggle_text-disabled: $gray-dark !global;
	$color_lang-toggle_disabled-hover_bg: $link-color !global;
	$color_lang-toggle_disabled-hover_text: $off-white !global;

	// Indicateurs de défilement
	$color_scroll-progress_line: $link-color !global;
	$color_scroll-progress_indicator: $gray-medium-dark !global;
	$color_scroll-progress_indicator-active: $link-color !global;

	// Éléments collapse
	$color_collapse_title: $off-white !global;
	$color_collapse_bg: $gray-lighter !global;
	$color_collapse_bg-title: $gray-dark !global;
	$color_collapse_border: $gray-dark !global;

	// Sections et héros
	$color_section_bg-even: $off-white !global;
	$color_section_bg-odd: $gray-lightest !global;
	$color_section_title: $secondary-color !global;
	$color-hero-bg: $off-white !global;
	$color-hero-title: $near-black !global;
	$color-hero-text: $near-black !global;

	// Section À propos
	$color_about_overlay-bg: $near-black !global;
	$color_about_overlay-text: $off-white !global;
	$color_about_button-bg: $link-color !global;
	$color_about_button-border: $off-white !global;
	$color_about_button-text: $off-white !global;

	// Section compétences
	$color_skills-icon_bg: $tertiary-color !global;
	$color_skills-icon_text: $secondary-color !global;

	// Cartes et sections
	$color_section_card-bg: $gray-lighter !global;
	$color_section-even_card-bg: $gray-lighter !global;
	$color_section-odd_card-bg: $gray-light !global;

	// Étiquettes de portfolio
	$color_portfolio-tag_bg: $tertiary-color !global;
	$color_portfolio-tag_bg-texte: $secondary-color !global;

	// Formulaires de contact
	$color_contact_form-bg: $gray-lighter !global;
	$color_contact_modal_bg: $gray-lightest !global;

	// Pieds de page
	$color_bottom-footer_bg: $gray-dark !global;
	$color_bottom-footer_title: $tertiary-color !global;
	$color_bottom-footer_text: $off-white !global;
	$color_bottom-footer_link-bg: $off-white !global;
	$color_bottom-footer_link-text: $link-color !global;
	$color_sticky-footer_bg: $gray-darker !global;
	$color_sticky-footer_text: $off-white !global;

	// Liens et focus
	$color_link: $link-color !global;
	$color_link-hover: $link-color-hover !global;
	$color_link-bg: $off-white !global;
	$color_focus-outline: $link-color !global;
	$color_focus-bg: $link-color !global;
	$color_focus-text: $off-white !global;

	// // États de validation et d'erreur
	// $color_error: $error-color !global;
	// $color_error-text: $off-white !global;
	// $color_error-border: darken($error-color, 10%) !global;

	// Infobulles
	$color_tooltip_text: $off-white !global;
	$color_tooltip_bg: rgba($near-black, 0.8) !global;
}

// -----------------------------------------------
// GÉNÉRATION DES THÈMES
// -----------------------------------------------
// Mixin qui génère le thème sombre à partir des conventions Tailwind
@mixin generate-dark-theme($steps: 7) {
	// Couleurs fondamentales décalées
	$off-white: get-dark-color("stone", 50, $steps) !global;
	// $off-white: get-color("stone", 950) !global;
	$near-black: get-dark-color("stone", 950, $steps) !global;
	$near-black: get-dark-color("stone", 950, $steps + 1) !global;
	// $near-black: get-color("stone", 50) !global;

	// Échelle de gris décalée
	$gray-darkest: get-dark-color("stone", 900, $steps) !global;
	$gray-darker: get-dark-color("stone", 800, $steps) !global;
	$gray-dark: get-dark-color("stone", 700, $steps) !global;
	$gray-medium-dark: get-dark-color("stone", 600, $steps) !global;
	$gray-medium-light: get-dark-color("stone", 500, $steps) !global;
	$gray-light: get-dark-color("stone", 400, $steps - 2) !global;
	$gray-lighter: get-dark-color("stone", 300, $steps - 2) !global;
	$gray-lightest: get-dark-color("stone", 200, $steps - 1) !global;

	// Couleurs sémantiques adaptées pour le thème sombre
	$primary-color: get-color(
		"amber",
		300
	) !global; // Légèrement ajusté pour meilleur contraste
	$secondary-color: get-color(
		"amber",
		100
	) !global; // Plus clair pour le thème sombre
	$tertiary-color: get-color(
		"amber",
		950
	) !global; // Plus foncé pour le thème sombre

	$link-color: get-dark-color("sky", 900, $steps) !global;
	$link-color-hover: get-dark-color("sky", 800, $steps) !global;
	$success-color: get-color("emerald", 500) !global;
	$error-color: #ef4444 !global;

	// Application des variables dérivées
	@include apply-theme-variables;
}

// Mixin qui génère le thème à fort contraste
@mixin generate-high-contrast-theme() {
	// Couleurs fondamentales basées sur les rôles
	$off-white: map-get($hc-colors, "background") !global;
	$near-black: map-get($hc-colors, "text") !global;

	// Simplification des niveaux de gris en utilisant uniquement 2 couleurs
	// Les éléments de premier plan utilisent la couleur de texte
	$gray-darkest: map-get($hc-colors, "text") !global;
	$gray-darker: map-get($hc-colors, "text") !global;
	$gray-dark: map-get($hc-colors, "text") !global;
	$gray-medium-dark: map-get($hc-colors, "text") !global;
	$gray-medium-light: map-get($hc-colors, "text") !global;

	// Les éléments de fond utilisent la couleur de fond
	$gray-light: map-get($hc-colors, "background") !global;
	$gray-lighter: map-get($hc-colors, "background") !global;
	$gray-lightest: map-get($hc-colors, "background") !global;

	// Couleurs sémantiques simplifiées par rôle
	$primary-color: map-get($hc-colors, "heading") !global;
	$secondary-color: map-get($hc-colors, "text") !global;
	$tertiary-color: map-get($hc-colors, "background") !global;
	$link-color: map-get($hc-colors, "link") !global;
	$link-color-hover: map-get($hc-colors, "focus") !global;
	$success-color: map-get($hc-colors, "success") !global;
	$error-color: map-get($hc-colors, "error") !global;

	// Application des variables dérivées
	@include apply-theme-variables;

	// Ajustements critiques pour l'accessibilité - appliquer directement
	$color_header_text: map-get($hc-colors, "text") !global;
	$color_header_bg: map-get($hc-colors, "background") !global;
	$color_focus-outline: map-get($hc-colors, "focus") !global;
	$color_collapse_border: map-get($hc-colors, "text") !global;

	// Ajustements spécifiques pour les éléments importants
	$color_section_title: map-get($hc-colors, "heading") !global;
	$color_section_bg-even: map-get($hc-colors, "background") !global;
	$color_section_bg-odd: map-get($hc-colors, "background") !global;

	// Assurer la lisibilité des textes sur tous les fonds
	$color-main-text: map-get($hc-colors, "text") !global;
	$color_main-text: map-get($hc-colors, "text") !global;

	// Liens toujours bien visibles
	$color_link: map-get($hc-colors, "link") !global;
	$color_link-hover: map-get($hc-colors, "focus") !global;

	// Éléments interactifs
	$color_about_button-bg: map-get($hc-colors, "heading") !global;
	$color_about_button-text: map-get($hc-colors, "background") !global;
}

// Mixin pour le thème deutéranopie
@mixin generate-deuteranopia-theme() {
	// Couleurs fondamentales avec transformation pour deutéranopie
	$off-white: get-color("stone", 50) !global; // Garder blanc
	$near-black: get-color("stone", 950) !global; // Garder noir

	// Échelle de gris intacte
	$gray-darkest: get-color("stone", 900) !global;
	$gray-darker: get-color("stone", 800) !global;
	$gray-dark: get-color("stone", 700) !global;
	$gray-medium-dark: get-color("stone", 600) !global;
	$gray-medium-light: get-color("stone", 500) !global;
	$gray-light: get-color("stone", 400) !global;
	$gray-lighter: get-color("stone", 300) !global;
	$gray-lightest: get-color("stone", 200) !global;

	// Couleurs sémantiques adaptées pour deutéranopie
	$primary-color: get-deuteranopia-color("amber", 300) !global;
	$secondary-color: get-deuteranopia-color("amber", 950) !global;
	$tertiary-color: get-deuteranopia-color("amber", 100) !global;
	$link-color: get-deuteranopia-color("sky", 900) !global;
	$link-color-hover: get-deuteranopia-color("sky", 800) !global;
	$success-color: #0075ff !global; // Bleu spécifique pour remplacer le vert
	$error-color: #ffcc00 !global; // Jaune-orange pour remplacer le rouge

	// Application des variables dérivées
	@include apply-theme-variables;

	// Surcharges spécifiques pour améliorer la lisibilité en deutéranopie
	$color_header_bg: $primary-color !global;
	$color_portfolio-tag_bg: get-deuteranopia-color("amber", 100) !global;
	$color_about_button-bg: $link-color !global;
}

// Mixin pour le thème protanopie
@mixin generate-protanopia-theme() {
	// Couleurs fondamentales avec transformation pour protanopie
	$off-white: get-color("stone", 50) !global;
	$near-black: get-color("stone", 950) !global;

	// Échelle de gris intacte
	$gray-darkest: get-color("stone", 900) !global;
	$gray-darker: get-color("stone", 800) !global;
	$gray-dark: get-color("stone", 700) !global;
	$gray-medium-dark: get-color("stone", 600) !global;
	$gray-medium-light: get-color("stone", 500) !global;
	$gray-light: get-color("stone", 400) !global;
	$gray-lighter: get-color("stone", 300) !global;
	$gray-lightest: get-color("stone", 200) !global;

	// Couleurs sémantiques adaptées pour protanopie
	$primary-color: get-protanopia-color("amber", 300) !global;
	$secondary-color: get-protanopia-color("amber", 950) !global;
	$tertiary-color: get-protanopia-color("amber", 100) !global;
	$link-color: get-protanopia-color("sky", 900) !global;
	$link-color-hover: get-protanopia-color("sky", 800) !global;
	$success-color: #0090ff !global; // Bleu clair pour remplacer le vert
	$error-color: #ffd700 !global; // Or pour remplacer le rouge

	// Application des variables dérivées
	@include apply-theme-variables;

	// Surcharges spécifiques pour améliorer la lisibilité en protanopie
	$color_header_bg: $primary-color !global;
	$color_portfolio-tag_bg: get-protanopia-color("amber", 100) !global;

	$color_about_button-bg: $link-color !global;
}

// Mixin pour le thème tritanopie
@mixin generate-tritanopia-theme() {
	// Couleurs fondamentales avec transformation pour tritanopie
	$off-white: get-color("stone", 50) !global;
	$near-black: get-color("stone", 950) !global;

	// Échelle de gris intacte
	$gray-darkest: get-color("stone", 900) !global;
	$gray-darker: get-color("stone", 800) !global;
	$gray-dark: get-color("stone", 700) !global;
	$gray-medium-dark: get-color("stone", 600) !global;
	$gray-medium-light: get-color("stone", 500) !global;
	$gray-light: get-color("stone", 400) !global;
	$gray-lighter: get-color("stone", 300) !global;
	$gray-lightest: get-color("stone", 200) !global;

	// Couleurs sémantiques adaptées pour tritanopie
	$primary-color: get-tritanopia-color("amber", 300) !global;
	$secondary-color: get-tritanopia-color("amber", 950) !global;
	$tertiary-color: get-tritanopia-color("amber", 100) !global;
	$link-color: get-tritanopia-color("sky", 900) !global;
	$link-color-hover: get-tritanopia-color("sky", 800) !global;
	$success-color: #ff6600 !global; // Orange pour remplacer le vert
	$error-color: #ff3399 !global; // Rose pour remplacer le rouge

	// Application des variables dérivées
	@include apply-theme-variables;

	// Surcharges spécifiques pour améliorer la lisibilité en tritanopie
	$color_header_bg: $primary-color !global;
	$color_portfolio-tag_bg: get-tritanopia-color("amber", 100) !global;
	$color_about_button-bg: $link-color !global;
}

// Fonction utilitaire pour remplacer une chaîne
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}
	@return $string;
}
